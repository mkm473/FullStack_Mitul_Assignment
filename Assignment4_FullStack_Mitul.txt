Assignment-4 SmartBridge Full Stack 
Name: Mitul Modh
Registration no.: 22BCE10491
Email: mitulkalpeshkumarmodh2022@vitbhopal.ac.in

______________________________________________________________________________________________________________________

Q1.Write a React component called Text Updater with an input field. Use the use State hook to update and display the text as the user types.

---------Navbar.js-------------

const Navbar = () => {
  return (
    <nav className="bg-blue-600 text-white p-4 flex justify-between items-center">
      <h1 className="text-2xl font-bold">ShopEase</h1>
      <ul className="flex gap-6">
        <li><a href="#products" className="hover:underline">Products</a></li>
        <li><a href="#contact" className="hover:underline">Contact</a></li>
      </ul>
    </nav>
  );
};

export default Navbar;

------------Hero.js-------------------

const Hero = () => {
  return (
    <section className="flex flex-col items-center justify-center text-center p-12 bg-gray-100">
      <h2 className="text-4xl font-bold text-blue-600">Welcome to ShopEase</h2>
      <p className="text-gray-700 mt-2">Find the best deals on the latest products.</p>
    </section>
  );
};

export default Hero;

-------------Product.js----------------

const products = [
  { id: 1, name: "Smartphone", price: "$499", img: "https://via.placeholder.com/150" },
  { id: 2, name: "Laptop", price: "$999", img: "https://via.placeholder.com/150" },
  { id: 3, name: "Headphones", price: "$199", img: "https://via.placeholder.com/150" },
];

const Products = () => {
  return (
    <section id="products" className="p-8 bg-white">
      <h3 className="text-2xl font-semibold text-center mb-6">Our Products</h3>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
        {products.map((product) => (
          <div key={product.id} className="p-4 border rounded-lg shadow-md">
            <img src={product.img} alt={product.name} className="w-full rounded-lg" />
            <h4 className="text-lg font-bold mt-2">{product.name}</h4>
            <p className="text-blue-600 font-semibold">{product.price}</p>
          </div>
        ))}
      </div>
    </section>
  );
};

export default Products;

-------------Footer.js--------------------

const Footer = () => {
  return (
    <footer id="contact" className="bg-black-600 text-white text-center p-4 mt-8">
      <p>&copy; 2025 ShopEase. All rights reserved.</p>
      <div className="mt-2">
        <a href="https://facebook.com" className="mx-2">Facebook</a>
        <a href="https://twitter.com" className="mx-2">Twitter</a>
        <a href="https://instagram.com" className="mx-2">Instagram</a>
      </div>
    </footer>
  );
};

export default Footer;

---------------App.js---------------

import Navbar from "./components/Navbar";
import Hero from "./components/Hero";
import Products from "./components/Products";
import Footer from "./components/Footer";

function App() {
  return (
    <div>
      <Navbar />
      <Hero />
      <Products />
      <Footer />
    </div>
  );
}

export default App;

__________________________________________________________________________________________________________

Q2.Create a product details page that displays more information when a product or button is clicked.

----------ProductList.js-----------

import { useState } from "react";
import ProductDetails from "./ProductDetails";

const products = [
  { id: 1, name: "Smartphone", price: "Rs499", description: "Latest 5G smartphone with AI-powered camera.", img: "C:\Users\OneDrive\Desktop\img1" },
  { id: 2, name: "Laptop", price: "Rs999", description: "High-performance laptop with 16GB RAM and SSD.", img: "C:\Users\OneDrive\Desktop\img2" },
  { id: 3, name: "Headphones", price: "Rs199", description: "Noise-canceling headphones with superior sound quality.", img: "C:\Users\OneDrive\Desktop\img3" },
];

const ProductList = () => {
  const [selectedProduct, setSelectedProduct] = useState(null);

  return (
    <div className="p-8">
      <h2 className="text-2xl font-bold text-center mb-6">Our Products</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
        {products.map((product) => (
          <div key={product.id} className="p-4 border rounded-lg shadow-md text-center">
            <img src={product.img} alt={product.name} className="w-full rounded-lg" />
            <h3 className="text-lg font-bold mt-2">{product.name}</h3>
            <p className="text-blue-600 font-semibold">{product.price}</p>
            <button 
              onClick={() => setSelectedProduct(product)} 
              className="mt-3 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition"
            >
              View Details
            </button>
          </div>
        ))}
      </div>

      {selectedProduct && <ProductDetails product={selectedProduct} onClose={() => setSelectedProduct(null)} />}
    </div>
  );
};

export default ProductList;

-----------ProductDetails.js-----------

const ProductDetails = ({ product, onClose }) => {
  return (
    <div className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50">
      <div className="bg-white p-6 rounded-lg shadow-lg w-80 text-center">
        <h2 className="text-xl font-bold">{product.name}</h2>
        <img src={product.img} alt={product.name} className="w-full rounded-lg my-4" />
        <p className="text-gray-700">{product.description}</p>
        <p className="text-blue-600 font-semibold mt-2">{product.price}</p>
        <button 
          onClick={onClose} 
          className="mt-4 bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition"
        >
          Close
        </button>
      </div>
    </div>
  );
};

export default ProductDetails;

-----------App.js--------------

import ProductList from "./components/ProductList";

function App() {
  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <ProductList />
    </div>
  );
}

export default App;

___________________________________________________________________________________________________________

Q3.Set up an Express.js server running on port 5000 with middleware to parse JSON requests.

-----------server.js------------

const express = require("express");

const app = express();
const PORT = 5000;

// Middleware to parse JSON requests
app.use(express.json());

// Sample route
app.get("/", (req, res) => {
  res.json({ message: "Welcome to the Express server!" });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

-------Steps to run the server------

Enter the following lines in terminal/shell

node server.js
npm install -g nodemon
nodemon server.js

------Test------

http://localhost:5000/

------output-----

{
  "message": "Welcome to the Express server!"
}

________________________________________________________________________________________

Q4.Define a GET route /welcome that responds with { message: "Welcome to Express!" }.

---------server.js-----------

const express = require("express");

const app = express();
const PORT = 5000;

// Middleware to parse JSON requests
app.use(express.json());

// Root Route
app.get("/", (req, res) => {
  res.json({ message: "Welcome to the Express server!" });
});

// ðŸ“Œ New /welcome Route
app.get("/welcome", (req, res) => {
  res.json({ message: "Welcome to Express!" });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

--------Start the server-------

Enter the following line in power shell
"node server.js"

--------Test---------

curl http://localhost:5000/welcome

---------Output-------

{
  "message": "Welcome to Express!"
}

__________________________________________________________________________________________________

Q5.Create an in-memory array to store users (id, name, email) and implement the following routes: 
â€¢ GET /users
â€¢ POST /users
â€¢ PUT /users/:id
â€¢ DELETE /users/:id

-------------server.js---------------

const express = require("express");

const app = express();
const PORT = 5000;

// Middleware to parse JSON requests
app.use(express.json());

// In-memory users array
let users = [
  { id: 1, name: "Alice", email: "alice@example.com" },
  { id: 2, name: "Bob", email: "bob@example.com" },
];

app.get("/users", (req, res) => {
  res.json(users);
});

app.post("/users", (req, res) => {
  const { name, email } = req.body;
  if (!name || !email) {
    return res.status(400).json({ error: "Name and email are required" });
  }
  const newUser = { id: users.length + 1, name, email };
  users.push(newUser);
  res.status(201).json(newUser);
});

app.put("/users/:id", (req, res) => {
  const userId = parseInt(req.params.id);
  const { name, email } = req.body;
  const user = users.find((u) => u.id === userId);

  if (!user) {
    return res.status(404).json({ error: "User not found" });
  }

  if (name) user.name = name;
  if (email) user.email = email;

  res.json(user);
});

app.delete("/users/:id", (req, res) => {
  const userId = parseInt(req.params.id);
  users = users.filter((u) => u.id !== userId);
  res.json({ message: "User deleted successfully" });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

----------Start the server-----------

Enter the following line in power shell
"node server.js"



----------------------------------------------------------------END-----------------------------------------------------












